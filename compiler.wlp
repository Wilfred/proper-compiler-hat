(defun main ()
  ; TODO: command line arguments
  (let (src-path "foo.wlp"
        src ""
        out-path "a.out")
    ; Delete the existing file at `out-path` if present.
    (if (file-exists? out-path)
        (delete! out-path)
      0)

    ; Read the input program.
    (if (file-exists? src-path)
        (set! src (slurp src-path))
      ; TODO: a runtime string concat would be really useful.
      (error "foo.wlp does not exist"))

    ; Compile to an executable that exits with the value given.
    (let (f (open out-path))
      (write-elf-header! f)
      (compile-exit! f (parse-int src))
      (chmod! out-path 484))))

(defun compile-exit! (f exit-code)
  ; mov rdi, exit-code
  (write! f 0x48)
  (write! f 0xbf)
  (write-int64! f exit-code)
  ; mov rax, 60 (sys_exit)
  (write! f 0x48)
  (write! f 0xb8)
  (write-int64! f 60)
  ; syscall
  (write! f 0x0f)
  (write! f 0x05))

(defun and (x y)
  (if x y false))

(defun or (x y)
  (if x true y))

(defun <= (x y)
  (or (< x y) (= x y)))

(defun >= (x y)
  (or (> x y) (= x y)))

; Read a single integer literal from `s`. Returns zero once we hit a
; non-digit character.
(defun parse-int (s)
  (let (i 0 result 0 keep-going true)
    (while (and (< i (string-length s)) keep-going)
      (do
        (let (c (char-at s i) zero-ascii 48)
          (if (and (>= c zero-ascii) (<= c (+ zero-ascii 9)))
              (set! result (+ (* 10 result) (- c zero-ascii)))
            (set! keep-going false)))
        (set! i (+ i 1))))
    result))

; Print `n` (an integer between 0 and 9) inclusive as an ASCII character.
(defun print-digit! (f n)
  (write! f (+ n 48)))

; Write the string representation of integer `n` to stdout.
(defun print-int! (n)
  (if (> n 999)
      (error "TODO: print-int!: larger numbers\n")
    0)
  ; Deliberately crude implementation to minimise reliance on other
  ; functions or parts of compilation. This is a last-resort debugging
  ; tool.
  (let (hundreds (intdiv n 100)
        tens (intdiv (- n (* 100 hundreds)) 10)
        ones (- n (+ (* 100 hundreds) (* 10 tens))))
    (if (> n 99)
        (print-digit! 1 hundreds)
     0)
    (if (> n 9)
        (print-digit! 1 tens)
      0)
    (print-digit! 1 ones))
  (print "\n"))

(defun power (x n)
  (if (< n 0)
      (error "power: exponent may not be negative\n")
    0)
  (if (= n 0)
      1
    (* x (power x (- n 1)))))

(defun shift-left (x n)
  (* x (power 2 n)))

(defun shift-right (x n)
  (intdiv x (power 2 n)))

(defun zero-high-bits (x n)
  (shift-right (shift-left x n) n))

(defun zero-low-bits (x n)
  (shift-left (shift-right x n) n))

; Return a value 0-255 that represents the `n`th byte in `x`.
; `n` is zero-indexed and least significant (rightmost) byte first.
(defun extract-byte (x n)
  ; TODO: allow reassignment of parameters.
  (let (y x)
    ; Integers in Wilfred Lisp are 61 bits (3 tag bits).
    (set! y (zero-high-bits y (- 61 (* (+ n 1) 8))))
    (set! y (zero-low-bits y (* n 8)))
    (shift-right y (* 8 n))))

(defun write-int32! (f n)
  (if (< n 0)
      (error "write-int32!: value must not be negative\n")
    0)
  (write! f (extract-byte n 0))
  (write! f (extract-byte n 1))
  (write! f (extract-byte n 2))
  (write! f (extract-byte n 3)))

(defun write-int64! (f n)
  (if (> n (power 2 32))
      (error "TODO: write-int64!: support values bigger than 32-bits\n")
    0)
  (write-int32! f n)
  (write! f 0)
  (write! f 0)
  (write! f 0)
  (write! f 0))

(defun write-elf-header! (f)
  ; Write ELF magic number.
  (write! f 0x7F)
  (write! f 0x45)
  (write! f 0x4C)
  (write! f 0x46)
  (write! f 0x02)
  (write! f 0x01)
  (write! f 0x01)
  (write! f 0x00)
  ; ELF reserved.
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)
  (write! f 0x00)

  ; e_type: Executable file
  (write! f 0x02)
  (write! f 0x00)
  ; e_machine: AMD64
  (write! f 0x3E)
  (write! f 0x00)
  ; e_version: 1
  (write-int32! f 1)

  (let (entry-point 0x400000
        elf-header-size 120)
    ; e_entry (the program entry address, which is load offset + header size)
    (write-int64! f (+ entry-point elf-header-size)))

  ; e_phoff (program header offset)
  (write-int64! f 0x40)
  ; e_shoff (no section header)
  (write-int64! f 0)

  ; e_flags (no flags)
  (write-int32! f 0)
  ; e_ehsize (ELF header size, 0x40)
  (write! f 0x40)
  (write! f 0x00)
  ; e_phentsize (program header size)
  (write! f 0x38)
  (write! f 0x00)
  ; e_phnum
  (write! f 0x01)
  (write! f 0x00)
  ; e_shentize
  (write! f 0x00)
  (write! f 0x00)
  ; e_shnum
  (write! f 0x00)
  (write! f 0x00)
  ; e_shstrndx
  (write! f 0x00)
  (write! f 0x00)

  ; p_type (loadable segment)
  (write-int32! f 0x01)
  ; p_flags (read and execute)
  (write-int32! f 0x05)
  ; p_offset
  (write-int64! f 0x0)
  ; p_vaddr (start of current section)
  (write-int64! f 0x400000)
  ; p_paddr (start of current section)
  (write-int64! f 0x400000)
  ; p_filesz, the file size
  (write-int64! f 0xDEADBEEF) ; TODO
  ; p_memsz
  (write-int64! f 0xDEADBEEF) ; TODO
  ; p_align
  (write-int64! f 0x200000))
    

; REFERENCES
;
; I find the following sites useful for documentation.
;
; syscalls: https://filippo.io/linux-syscall-table/
; instructions: https://www.felixcloutier.com/x86/

; DEBUGGING NOTES
;
; objdump can't show us the instructions of our executable section
; because we haven't set up section headers. gdb works fine though.
;
; $ gdb hello
; (gdb) set disassembly-flavor intel
; (gdb) starti
; (gdb) x/5i $pc
;
; Alternatively, to print the following instructions on every step:
;
; (gdb) display/5i $pc
;
; The gdb command 'layout reg' is helpful for seeing register
; values. You can also do 'layout asm' to see the assembly alongside.

