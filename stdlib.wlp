; Return the boolean AND of `x` and `y`. Does not short-ciruit.
(defun and (x y)
  (if x y false))

; Return the boolean OR of `x` and `y`. Does not short-ciruit.
(defun or (x y)
  (if x true y))

; Return true if `x` is less than or equal to `y`.
(defun <= (x y)
  (or (< x y) (= x y)))

; Return true if `x` is greater than or equal to `y`.
(defun >= (x y)
  (or (> x y) (= x y)))

; Read `path` and return its contents as a string.
(defun slurp (path)
  (let (f (open path)
        file-size 0
        ptr 0)
    (file-seek-end! f)
    (set! file-size (file-pos f))
    (file-seek! f 0)
    (set! ptr (__allocate (+ file-size 16)))
    (__read f (+ 8 ptr) file-size)
    (__pointer-to-string ptr file-size)))

; Read a single character from a string `s` at position `i`, and
; return its value as an integer.
(defun char-at (s i)
  (if (> (+ i 1) (string-length s))
    (error "char-at: out of bounds")
    (if (< i 0)
        (error "char-at: i cannot be negative")
      0))
  (__char-at s i))

; Calculate `x` to the power of `n`.
(defun power (x n)
  (if (< n 0)
      (error "power: exponent may not be negative\n")
    0)
  (if (= n 0)
      1
    (* x (power x (- n 1)))))

(defun shift-left (x n)
  (* x (power 2 n)))

(defun shift-right (x n)
  (intdiv x (power 2 n)))

